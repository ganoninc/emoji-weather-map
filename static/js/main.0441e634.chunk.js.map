{"version":3,"sources":["EmojiWeatherMapEmojiLoading.svg","EmojiWeatherMapSelector.js","EmojiWeatherMapSettings.js","EmojiWeatherMapOffset.js","EmojiWeatherMapEmoji.js","EmojiWeatherMapRow.js","EmojiWeatherMapLabel.js","EmojiWeatherMap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","EmojiWeatherMapSelector","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","event","selectedMapTemplateURL","target","setState","onMapSelected","selectorDisabled","isLoadingTemplate","react_default","a","createElement","Fragment","className","htmlFor","disabled","onChange","id","Component","EmojiWeatherMapSettings","_this$props","displayLoadingIcon","alt","src","LoadingImage","src_EmojiWeatherMapSelector","EmojiWeatherMapOffset","spaces","index","length","push","EmojiWeatherMapEmoji","isLoading","currentWeatherIcon","dataProviderEndpoint","geographicCoordinates","latitude","longitude","data","currentWeatherLabel","_this2","onLoading","fetch","then","response","text","onLoaded","getCurrentWeatherIcon","getCurrentWeatherLabel","_this$state","role","aria-label","EmojiWeatherMapRow","row","items","map","item","returnedItem","type","src_EmojiWeatherMapOffset","key","src_EmojiWeatherMapEmoji","EmojiWeatherMapLabel","icon","name","EmojiWeatherMap","template","rows","src_EmojiWeatherMapRow","src_EmojiWeatherMapLabel_0","App","handleLoadingActionStart","handleLoadingActionEnd","handleSelectedMap","emojiWeatherMapTemplate","loadingActionsCount","mapTemplateURL","json","mapView","src_EmojiWeatherMap_0","src_EmojiWeatherMapSettings_0","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0441e634.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/EmojiWeatherMapEmojiLoading.137847d1.svg\";","import React, { Component } from 'react';\n\nclass EmojiWeatherMapSelector extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { \n            value: './templates/france.json'\n         };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        let selectedMapTemplateURL = event.target.value;\n        this.setState((state, props) => {\n            props.onMapSelected(selectedMapTemplateURL);\n            return { value: selectedMapTemplateURL };\n        });\n    }\n\n    componentDidMount() {\n        const { value } = this.state;\n        this.props.onMapSelected(value);\n    }\n\n    render() {\n        const { isLoadingTemplate } = this.props;\n        let selectorDisabled = isLoadingTemplate;\n        \n        return (\n            <>\n                <div className=\"form-group row\">\n                    <label htmlFor=\"mapSelector\" className=\"col-3 col-form-label\">Country</label>\n                    <div className=\"col-9\">\n                        <select disabled={selectorDisabled} value={this.state.value} onChange={this.handleChange} className=\"form-control\" id=\"mapSelector\">\n                            <option value=\"./templates/france.json\">France</option>\n                            {/* <option value=\"./templates/francetest.json\">Test</option> */}\n                        </select>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default EmojiWeatherMapSelector;","import React, { Component } from 'react';\nimport EmojiWeatherMapSelector from './EmojiWeatherMapSelector';\nimport LoadingImage from \"./EmojiWeatherMapEmojiLoading.svg\";\nimport './EmojiWeatherMapSettings.scss';\n\nclass EmojiWeatherMapSettings extends Component {\n\n    render() {\n        const { displayLoadingIcon, onMapSelected, isLoadingTemplate } = this.props;\n        \n        return (\n            <>\n                <div className=\"EmojiWeatherMapSettings\">\n                    <h1 className=\"EmojiWeatherMapSettings__AppTitle\">{displayLoadingIcon ? <img alt=\"Loading\" src={LoadingImage} />  : \"\"} Emoji Weather Map</h1>\n                    <div className=\"EmojiWeatherMapSettings__SettingsList\">\n                        <EmojiWeatherMapSelector onMapSelected={onMapSelected} isLoadingTemplate={isLoadingTemplate}></EmojiWeatherMapSelector>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default EmojiWeatherMapSettings;","import React, { Component } from 'react';\n\nclass EmojiWeatherMapOffset extends Component {\n  \n  render() {\n    let spaces = []; \n    for (let index = 0; index <  this.props.length; index++) {\n      spaces.push(<span className=\"emojiWeatherMap__offsetSpace\">&nbsp;</span>);\n    }\n\n    return (\n      spaces\n    );\n  }\n}\n\nexport default EmojiWeatherMapOffset;","import React, { Component } from 'react';\nimport LoadingImage from \"./EmojiWeatherMapEmojiLoading.svg\";\n\nclass EmojiWeatherMapEmoji extends Component {\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      currentWeatherIcon: null\n    };\n\n    this.dataProviderEndpoint = 'https://giovanetti.fr/ewm-data-provider/?latitude=' + props.geographicCoordinates.latitude + '&longitude=' + props.geographicCoordinates.longitude;\n  }\n\n  getCurrentWeatherIcon(data) {\n    let currentWeatherIcon;\n    switch (data) {\n      case '01d':\n        currentWeatherIcon = '☀️';\n        break;\n      case '01n':\n        currentWeatherIcon = '🌕';\n        break;\n      case '02d':\n        currentWeatherIcon = '🌤️';\n        break;\n      case '02n':\n        currentWeatherIcon = '☁️';\n        break;\n      case '03d':\n        currentWeatherIcon = '⛅';\n        break;\n      case '03n':\n        currentWeatherIcon = '☁️';\n        break;\n      case '04d':\n        currentWeatherIcon = '☁️';\n        break;\n      case '04n':\n        currentWeatherIcon = '☁️';\n        break;\n      case '09d':\n        currentWeatherIcon = '️️🌧️';\n        break;\n      case '09n':\n        currentWeatherIcon = '🌧️';\n        break;\n      case '10d':\n        currentWeatherIcon = '️️🌦️';\n        break;\n      case '10n':\n        currentWeatherIcon = '🌧️';\n        break;\n      case '11d':\n        currentWeatherIcon = '️️⛈️';\n        break;\n      case '11n':\n        currentWeatherIcon = '⛈️';\n        break;\n      case '13d':\n        currentWeatherIcon = '️️🌨️';\n        break;\n      case '13n':\n        currentWeatherIcon = '🌨️';\n        break;\n      case '50d':\n        currentWeatherIcon = '️️🌫️';\n        break;\n      case '50n':\n        currentWeatherIcon = '🌫️';\n        break;\n    \n      default:\n        currentWeatherIcon = '❌';\n        break;\n    }\n    return currentWeatherIcon;\n  }\n\n  getCurrentWeatherLabel(data) {\n    let currentWeatherLabel;\n    switch (data) {\n      case '01d':\n      case '01n':\n        currentWeatherLabel = 'Clear Sky';\n        break;\n      case '02d':\n      case '02n':\n        currentWeatherLabel = 'Few Clouds';\n        break;\n      case '03d':\n      case '03n':\n        currentWeatherLabel = 'Scattered Clouds';\n        break;\n      case '04d':\n      case '04n':\n        currentWeatherLabel = 'Broken Clouds';\n        break;\n      case '09d':\n      case '09n':\n        currentWeatherLabel = 'Shower Rain';\n        break;\n      case '10d':\n      case '10n':\n        currentWeatherLabel = 'Rain';\n        break;\n      case '11d':\n      case '11n':\n        currentWeatherLabel = 'Thunderstorm';\n        break;\n      case '13d':\n      case '13n':\n        currentWeatherLabel = 'Snow';\n        break;\n      case '50d':\n      case '50n':\n        currentWeatherLabel = 'Mist';\n        break;\n\n      default:\n        currentWeatherLabel = 'Error';\n        break;\n    }\n    return currentWeatherLabel;\n  }\n\n  componentDidMount() {\n    this.setState(() => {\n      this.props.onLoading();\n      return { isLoading: true };\n    });\n\n    fetch(this.dataProviderEndpoint)\n      .then(response => response.text())\n      .then(data => {\n        this.setState((state, props) => { \n          props.onLoaded();\n          return {\n            isLoading: false, currentWeatherIcon: this.getCurrentWeatherIcon(data), currentWeatherLabel: this.getCurrentWeatherLabel(data)\n          };\n        });\n      });\n  }\n\n  render() {\n    const { isLoading, currentWeatherIcon, currentWeatherLabel } = this.state;\n\n    if (isLoading){\n      return (\n        <span className=\"emojiWeatherMap__emojiLoading\" role=\"img\" aria-label=\"Loading\">\n          <img alt=\"emoji\" src={LoadingImage} />\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"emojiWeatherMap__emoji\" role=\"img\" aria-label={currentWeatherLabel}>\n          {currentWeatherIcon}\n        </span>\n      );\n    }\n  }\n}\n\nexport default EmojiWeatherMapEmoji;","import React, { Component } from 'react';\nimport EmojiWeatherMapOffset from './EmojiWeatherMapOffset';\nimport EmojiWeatherMapEmoji from './EmojiWeatherMapEmoji';\n\nclass EmojiWeatherMapRow extends Component {\n\n  render() {\n    return (\n      <div className=\"emojiWeatherMap__row\">\n      {\n        this.props.row.items.map( (item, index) => {\n          let returnedItem = null;\n          if (item.type === \"offset\") {\n            returnedItem = <EmojiWeatherMapOffset key={index} length={item.length}></EmojiWeatherMapOffset>\n          } else if (item.type === \"emoji\") {\n            returnedItem = <EmojiWeatherMapEmoji key={index} geographicCoordinates={item.geographicCoordinates} onLoading={this.props.onLoading} onLoaded={this.props.onLoaded}></EmojiWeatherMapEmoji>\n          }\n          return returnedItem;\n        })\n      }\n      </div>\n    );\n  }\n}\n\nexport default EmojiWeatherMapRow;","import React, { Component } from 'react';\nimport './EmojiWeatherMapLabel.scss';\n\nclass EmojiWeatherMapLabel extends Component {\n\n    render() {\n        return (\n            <h2 className=\"EmojiWeatherMapLabel\" >{this.props.icon} {this.props.name}</h2>\n        );\n    }\n}\n\nexport default EmojiWeatherMapLabel;","import React, { Component } from 'react';\nimport EmojiWeatherMapRow from './EmojiWeatherMapRow';\nimport EmojiWeatherMapLabel from './EmojiWeatherMapLabel';\nimport './EmojiWeatherMap.scss';\n\nclass EmojiWeatherMap extends Component {\n\n  render () {\n    return (\n      <>\n        <div className=\"emojiWeatherMap\">{\n          this.props.template.rows.map( (row, index) => {\n            return <EmojiWeatherMapRow key={index} row={row} onLoading={this.props.onLoading} onLoaded={this.props.onLoaded}></EmojiWeatherMapRow>;\n          })\n        }</div>\n        <EmojiWeatherMapLabel name={this.props.template.name} icon={this.props.template.icon}></EmojiWeatherMapLabel>\n      </>\n    );\n  }\n}\n\nexport default EmojiWeatherMap;","import React, { Component } from 'react';\nimport EmojiWeatherMapSettings from './EmojiWeatherMapSettings';\nimport EmojiWeatherMap from './EmojiWeatherMap';\nimport './App.scss';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleLoadingActionStart = this.handleLoadingActionStart.bind(this);\n    this.handleLoadingActionEnd = this.handleLoadingActionEnd.bind(this);\n    this.handleSelectedMap = this.handleSelectedMap.bind(this);\n\n    this.state = {\n      emojiWeatherMapTemplate: null,\n      isLoadingTemplate: false,\n      loadingActionsCount: 0\n    };\n  }\n\n  handleLoadingActionStart() {\n    this.setState(state => { \n      return {\n        loadingActionsCount: state.loadingActionsCount + 1\n      };\n    });\n  }\n\n  handleLoadingActionEnd() {\n    this.setState(state => {\n      return {\n        loadingActionsCount: state.loadingActionsCount - 1\n      };\n    });    \n  }\n\n  handleSelectedMap(mapTemplateURL) {\n    this.setState({ isLoadingTemplate: true });\n\n    fetch(mapTemplateURL)\n      .then(response => response.json())\n      .then(data => this.setState({ emojiWeatherMapTemplate: data, isLoadingTemplate: false }));\n  }\n\n  // componentDidMount() {\n  // }\n\n  render() {\n    const { emojiWeatherMapTemplate, isLoadingTemplate, loadingActionsCount } = this.state;\n    let mapView;\n    \n    if (isLoadingTemplate || !emojiWeatherMapTemplate) {\n      mapView = <p>Loading map...</p>;\n    } else {\n      mapView = <EmojiWeatherMap template={emojiWeatherMapTemplate} onLoading={this.handleLoadingActionStart} onLoaded={this.handleLoadingActionEnd}></EmojiWeatherMap>;\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"row align-items-center App__body\">\n            <div className=\"col-12 App__settings\">\n              <EmojiWeatherMapSettings displayLoadingIcon={loadingActionsCount > 0} onMapSelected={this.handleSelectedMap} isLoadingTemplate={this.isLoadingTemplate}></EmojiWeatherMapSettings>\n            </div>\n            <div className=\"col-12 App__mapView\">\n              {mapView}\n            </div>\n            <div className=\"col-12\">\n              <hr />\n              Emoji Weather Map - A simple React App made by Romain Giovanetti (<a href=\"https://giovanetti.fr/\" rel=\"noopener noreferrer\" target=\"_blank\">giovanetti.fr</a>).\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}